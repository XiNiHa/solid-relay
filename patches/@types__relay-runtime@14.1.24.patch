diff --git a/lib/store/RelayModernEnvironment.d.ts b/lib/store/RelayModernEnvironment.d.ts
index 79e87c24b23e037dfdf0fd63e87a5965b082319f..95aa0b144410925214e4a43fd61f65dbd4c0b768 100644
--- a/lib/store/RelayModernEnvironment.d.ts
+++ b/lib/store/RelayModernEnvironment.d.ts
@@ -47,6 +47,7 @@ export default class RelayModernEnvironment implements Environment {
     configName: string | null | undefined;
     requiredFieldLogger: RequiredFieldLogger;
     constructor(config: EnvironmentConfig);
+    UNSTABLE_getDefaultRenderPolicy(): RenderPolicy;
     getStore(): Store;
     getNetwork(): Network;
     getOperationTracker(): RelayOperationTracker;
diff --git a/lib/store/RelayModernStore.d.ts b/lib/store/RelayModernStore.d.ts
index 61e8bc57a8699d622b52ec1305acda24e2f99a1d..b87f394b1c50c5890ff0bbc0261ea8f068d3485a 100644
--- a/lib/store/RelayModernStore.d.ts
+++ b/lib/store/RelayModernStore.d.ts
@@ -29,6 +29,7 @@ export default class RelayModernStore implements Store {
         },
     );
     getSource(): RecordSource;
+    getEpoch(): number;
     check(operation: OperationDescriptor, options?: CheckOptions): OperationAvailability;
     retain(operation: OperationDescriptor): Disposable;
     lookup(selector: SingularReaderSelector): Snapshot;
diff --git a/lib/store/RelayStoreTypes.d.ts b/lib/store/RelayStoreTypes.d.ts
index 0eb534fecdc429cf12cdb77111703f6b01c58c95..5d9caa84086c1616e4e102e5b1e36167b9b31934 100644
--- a/lib/store/RelayStoreTypes.d.ts
+++ b/lib/store/RelayStoreTypes.d.ts
@@ -9,7 +9,6 @@ import {
 } from "../network/RelayNetworkTypes";
 import { RelayObservable } from "../network/RelayObservable";
 import { GraphQLTaggedNode } from "../query/RelayModernGraphQLTag";
-import { RequestIdentifier } from "../util/getRequestIdentifier";
 import {
     NormalizationLinkedField,
     NormalizationScalarField,
@@ -28,6 +27,7 @@ import {
     Variables,
     VariablesOf,
 } from "../util/RelayRuntimeTypes";
+import { RequestIdentifier } from "../util/getRequestIdentifier";
 import { InvalidationState } from "./RelayModernStore";
 import { RelayOperationTracker } from "./RelayOperationTracker";
 import { RecordState } from "./RelayRecordState";
@@ -94,6 +94,16 @@ export interface NormalizationSelector {
     readonly variables: Variables;
 }
 
+export interface MissingLiveResolverField {
+  path: string;
+  liveStateID: DataID;
+}
+
+export interface MissingClientEdgeRequestInfo {
+  request: ConcreteRequest;
+  clientEdgeDestinationID: DataID;
+}
+
 /**
  * A representation of a selector and its results at a particular point in time.
  */
@@ -102,6 +112,10 @@ export interface TypedSnapshot<TData> {
     readonly isMissingData: boolean;
     readonly seenRecords: RecordMap;
     readonly selector: SingularReaderSelector;
+    readonly missingLiveResolverFields?: MissingLiveResolverField[];
+    readonly missingClientEdges: MissingClientEdgeRequestInfo[] | null;
+    readonly missingRequiredFields: MissingRequiredFields | null
+    readonly relayResolverErrors: RelayResolverErrors
 }
 export type Snapshot = TypedSnapshot<SelectorData>;
 
@@ -232,6 +246,8 @@ export interface Store {
      */
     getSource(): RecordSource;
 
+    getEpoch(): number;
+
     /**
      * Determine if the operation can be resolved with data in the store (i.e. no
      * fields are missing).
@@ -645,6 +661,8 @@ export interface Environment {
      */
     getOperationTracker(): RelayOperationTracker;
 
+    UNSTABLE_getDefaultRenderPolicy(): RenderPolicy;
+
     /**
      * Read the results of a selector from in-memory records in the store.
      * Optionally takes an owner, corresponding to the operation that
diff --git a/lib/util/ReaderNode.d.ts b/lib/util/ReaderNode.d.ts
index e88aae7969d1afc1484d30dd4ebaae254f1231fc..11cb2b6a40cc22d451bc055435f86f34ef889d8c 100644
--- a/lib/util/ReaderNode.d.ts
+++ b/lib/util/ReaderNode.d.ts
@@ -34,6 +34,7 @@ export interface ReaderFragment {
             readonly connection?: readonly ConnectionMetadata[];
             readonly mask?: boolean;
             readonly plural?: boolean;
+            readonly hasClientEdges?: boolean;
             readonly refetch?: ReaderRefetchMetadata;
         }
         | null
